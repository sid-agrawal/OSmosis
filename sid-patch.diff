commit 55bbc609b4b979e7120f651ff4b88b83c94032a2
Author: Sid Agrawal <sid@sid-agrawal.ca>
Date:   Mon Feb 19 11:32:17 2024 -0800

    sid: wip two hello

diff --git a/apps/hello/src/main.c b/apps/hello/src/main.c
index 1f9093c..1b3a245 100644
--- a/apps/hello/src/main.c
+++ b/apps/hello/src/main.c
@@ -21,7 +21,7 @@ char _cpio_archive_end[1];
 #include<sel4gpi/ads_clientapi.h>
 #include<sel4gpi/pd_clientapi.h>
 
-#define APP_MALLOC_SIZE 1 * 1024
+#define APP_MALLOC_SIZE PAGE_SIZE_4K
 char __attribute__((aligned(PAGE_SIZE_4K))) morecore_area[APP_MALLOC_SIZE];
 size_t morecore_size = APP_MALLOC_SIZE;
 /* Pointer to free space in the morecore area. */
diff --git a/apps/sel4test-tests/src/tests/pd_capability.c b/apps/sel4test-tests/src/tests/pd_capability.c
index 7440f2f..8a01f71 100644
--- a/apps/sel4test-tests/src/tests/pd_capability.c
+++ b/apps/sel4test-tests/src/tests/pd_capability.c
@@ -68,12 +68,8 @@ int test_new_process_osmosis(env_t env)
                             slot); // with this arg.
     assert(error == 0);
 
-    error = pd_client_dump(&pd_os_cap, NULL, 0);
-    assert(error == 0);
 
     /*********************************************/
-#define START_TWO_PROCESSES 1
-#if START_TWO_PROCESSES
 
     /* Create a new PD */
     pd_client_context_t pd_os_cap2;
@@ -100,9 +96,10 @@ int test_new_process_osmosis(env_t env)
     error = pd_client_load(&pd_os_cap2, &ads_os_cap2, "hello");
     assert(error == 0);
 
-    // Copy the ep_object to the new PD
-    // seL4_Word slot;
-    // error = pd_client_send_cap(&pd_os_cap, ep_object.cptr, &slot);
+    // Change this to send an MO
+    // error = pd_client_send_cap(&pd_os_cap2,
+    //                            ads_os_cap.badged_server_ep_cspath.capPtr,
+    //                            &slot);
     // assert(error == 0);
 
     // Create a new CPU cap, and make that the PD's primary cap.
@@ -116,7 +113,8 @@ int test_new_process_osmosis(env_t env)
     error = pd_client_dump(&pd_os_cap2, NULL, 0);
     assert(error == 0);
 
-#endif
+    error = pd_client_dump(&pd_os_cap, NULL, 0);
+    assert(error == 0);
 
     /*********************************************/
     printf("------------------ENDING: %s------------------\n", __func__);
diff --git a/libsel4gpi/include/sel4gpi/ads_component.h b/libsel4gpi/include/sel4gpi/ads_component.h
index 477a2d1..cdbd192 100644
--- a/libsel4gpi/include/sel4gpi/ads_component.h
+++ b/libsel4gpi/include/sel4gpi/ads_component.h
@@ -131,6 +131,7 @@ enum ads_component_msgregs
 /* Per-client context maintained by the server. */
 typedef struct _ads_component_registry_entry {
     ads_t ads;
+    uint32_t count; /*There can be more than one cap to this object.*/
     struct _ads_component_registry_entry *next;
 } ads_component_registry_entry_t;
 
diff --git a/libsel4gpi/include/sel4gpi/ads_obj.h b/libsel4gpi/include/sel4gpi/ads_obj.h
index 3016fff..af4ce43 100644
--- a/libsel4gpi/include/sel4gpi/ads_obj.h
+++ b/libsel4gpi/include/sel4gpi/ads_obj.h
@@ -19,6 +19,7 @@ typedef struct _ads {
     vka_object_t *root_page_dir;
     sel4utils_process_t *process_for_cookies;
     uint32_t ads_obj_id;
+    bool mapped;
 }ads_t;
 
 /**
diff --git a/libsel4gpi/src/ads_obj.c b/libsel4gpi/src/ads_obj.c
index 896f5f3..2f63a3c 100644
--- a/libsel4gpi/src/ads_obj.c
+++ b/libsel4gpi/src/ads_obj.c
@@ -172,6 +172,10 @@ void ads_dump_rr(ads_t *ads, model_state_t *ms)
     assert(vka != NULL);
     OSDB_PRINTF(ADSSERVS "vka address: %p\n", vka);
 
+    char ads_res_id[CSV_MAX_STRING_SIZE];
+    snprintf(ads_res_id, CSV_MAX_STRING_SIZE, "ADS_%u", ads->ads_obj_id);
+    add_resource(ms, "ADS", ads_res_id);
+
     while (from_sel4_res != NULL)
     {
         char res_type[CSV_MAX_STRING_SIZE];
@@ -181,6 +185,7 @@ void ads_dump_rr(ads_t *ads, model_state_t *ms)
                  ads->ads_obj_id, from_sel4_res->start,
                  from_sel4_res->end);
         add_resource(ms, res_type, res_id);
+        add_resource_depends_on(ms, ads_res_id, res_id);
 
         /* Print all the caps of this reservation */
         void *va = (void *)from_sel4_res->start;
diff --git a/libsel4gpi/src/pd_obj.c b/libsel4gpi/src/pd_obj.c
index dbb1c7c..d51a3ae 100644
--- a/libsel4gpi/src/pd_obj.c
+++ b/libsel4gpi/src/pd_obj.c
@@ -216,8 +216,10 @@ int pd_send_cap(pd_t *to_pd,
     assert(cap != 0);
     ZF_LOGE("pd_send_cap: Sending cap %ld(badge:%lx) to pd %p\n", cap, badge, to_pd);
 
-
-
+    seL4_Word new_badge;
+    int error = 0;
+    cspacepath_t src, dest;
+                seL4_CPtr dest_cptr;
     /*
         Find out if the cap is an OSmosis cap or not.
     */
@@ -226,10 +228,38 @@ int pd_send_cap(pd_t *to_pd,
         gpi_cap_t cap_type = get_cap_type_from_badge(badge);
         switch (cap_type){
             case GPICAP_TYPE_ADS:
-                ZF_LOGF("Sending ADS cap is not supported yet");
+                // ZF_LOGF("Sending ADS cap is not supported yet");
+                new_badge = gpi_new_badge(cap_type,
+                                                    get_perms_from_badge(badge),
+                                                    to_pd->pd_obj_id, /* Client ID*/
+                                                    get_object_id_from_badge(badge));
+                // Increment the counter in the mo_t object.
+                ads_component_registry_entry_t *ads_reg = ads_component_registry_get_entry_by_badge(badge);
+                assert(ads_reg != NULL);
+                ads_reg->count++;
+
+                // Mint a new cap for the child.
+                vka_cspace_make_path(get_ads_component()->server_vka,
+                                     get_ads_component()->server_ep_obj.cptr, &src);
+                vka_cspace_alloc(get_ads_component()->server_vka, &dest_cptr);
+                vka_cspace_make_path(get_ads_component()->server_vka, dest_cptr, &dest);
+
+                error = vka_cnode_mint(&dest,
+                                           &src,
+                                           seL4_AllRights,
+                                           new_badge);
+                if (error)
+                {
+                    OSDB_PRINTF(PDSERVS "%s: Failed to mint new_badge %lx.\n",
+                                __FUNCTION__, new_badge);
+                    return 1;
+                }
+                cap = dest_cptr;
+                to_pd->has_access_to[2].type = GPICAP_TYPE_ADS;
+                to_pd->has_access_to[2].res_id = ads_reg->ads.ads_obj_id;
                 break;
             case GPICAP_TYPE_MO:
-                seL4_Word new_badge = gpi_new_badge(cap_type,
+                new_badge = gpi_new_badge(cap_type,
                                                     get_perms_from_badge(badge),
                                                     to_pd->pd_obj_id, /* Client ID*/
                                                     get_object_id_from_badge(badge));
@@ -239,14 +269,12 @@ int pd_send_cap(pd_t *to_pd,
                 mo_reg->count++;
 
                 // Mint a new cap for the child.
-                cspacepath_t src, dest;
                 vka_cspace_make_path(get_mo_component()->server_vka,
                                      get_mo_component()->server_ep_obj.cptr, &src);
-                seL4_CPtr dest_cptr;
                 vka_cspace_alloc(get_mo_component()->server_vka, &dest_cptr);
                 vka_cspace_make_path(get_mo_component()->server_vka, dest_cptr, &dest);
 
-                int error = vka_cnode_mint(&dest,
+                error = vka_cnode_mint(&dest,
                                            &src,
                                            seL4_AllRights,
                                            new_badge);
@@ -379,24 +407,31 @@ int pd_dump(pd_t *pd)
         //  get the RR for that cap
         switch (pd->has_access_to[idx].type)
         {
+        case GPICAP_TYPE_NONE:
+            break;
         case GPICAP_TYPE_ADS:
-            char res_id[20];
+            char res_id[CSV_MAX_STRING_SIZE];
             snprintf(res_id, 20, "ADS_%lu", pd->has_access_to[idx].res_id);
             add_has_access_to(ms,
                               pd_id,
                               res_id,
                               "true");
-            ads_component_registry_entry_t *client_data =
+            ads_component_registry_entry_t *ads_data =
                 ads_component_registry_get_entry_by_id(pd->has_access_to[idx].res_id);
             assert(client_data != NULL);
-            ads_dump_rr(&client_data->ads, ms);
+            ads_dump_rr(&ads_data->ads, ms);
+            add_has_access_to(ms,
+                              pd_id,
+                              res_id,
+                              ads_data->ads.mapped ? "true" : "false");
 
             break;
         case GPICAP_TYPE_MO:
             break;
         case GPICAP_TYPE_CPU:
             break;
-        case GPICAP_TYPE_PD:
+        case GPICAP_TYPE_seL4:
+            // Use some other method to get the cap details
             break;
         default:
             ZF_LOGF("Calling anothe PD to get the info %s", __FUNCTION__);
@@ -404,17 +439,13 @@ int pd_dump(pd_t *pd)
         }
     }
 
+    print_model_state(ms);
+    free(ms);
     /* Print RDE Info*/
     for (int idx = 0; idx < MAX_PD_OSM_RDE; idx++)
     {
         print_pd_osm_rde_info(&pd->rde[idx]);
-
-        // Find pd from the pd_id
-        // if pd found
-        // pd_dump(&pd->rde[idx].pd_obj_id);
     }
-    print_model_state(ms);
-    free(ms);
 
     return 0;
 }
